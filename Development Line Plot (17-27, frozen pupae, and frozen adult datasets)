import matplotlib.pyplot as plt
import numpy as np

# Data
x_labels = ["2nd instar", "3rd instar", "4th instar", "5th instar", "pupa date", "eclosion date"]
x = np.arange(len(x_labels))  # Numeric x-values

# Group L data
avg_L = np.array([3.021176471, 5.106470588, 7.128823529, 10.13352941, 16.00058824, 25.09705882])
std_L = np.array([0.02057983, 0.249021615, 0.242767439, 0.670428419, 1.3151163, 1.512827505])

# Group F data
avg_F = np.array([3.091851852, 5.125185185, 7.21037037, 10.1562963, 16.00925926, 25.11185185])
std_F = np.array([0.27396009, 0.267256293, 0.412883682, 0.793585574, 1.579880536, 1.613024004])

# Plotting
plt.figure(figsize=(10, 6))

# Plot L group with shaded std
plt.plot(x, avg_L, label='Leaf diet (L)', color='blue', marker='o')
plt.fill_between(x, avg_L - std_L, avg_L + std_L, color='blue', alpha=0.2)

# Plot F group with shaded std
plt.plot(x, avg_F, label='Flower diet (F)', color='green', marker='s')
plt.fill_between(x, avg_F - std_F, avg_F + std_F, color='green', alpha=0.2)

# Axis formatting
plt.xticks(x, x_labels)
plt.xlabel('Developmental stage')
plt.ylabel('Days since start')
plt.title('Caterpillar Development Timing: Leaf vs Flower Diet')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)

plt.tight_layout()
plt.show()




# Data
# Original 17-27 dataset, but wihtout eclosion date

x_labels = ["2nd instar", "3rd instar", "4th instar", "5th instar", "pupa date"]
x = np.arange(len(x_labels))  # Numeric x-values

# Group L data
avg_L = np.array([3.021176471, 5.106470588, 7.128823529, 10.13352941, 16.00058824])
std_L = np.array([0.02057983, 0.249021615, 0.242767439, 0.670428419, 1.3151163])

# Group F data
avg_F = np.array([3.091851852, 5.125185185, 7.21037037, 10.1562963, 16.00925926])
std_F = np.array([0.27396009, 0.267256293, 0.412883682, 0.793585574, 1.579880536])

# Plotting
plt.figure(figsize=(10, 6))

# Plot L group with shaded std
plt.plot(x, avg_L, label='Leaf diet (L)', color='blue', marker='o')
plt.fill_between(x, avg_L - std_L, avg_L + std_L, color='blue', alpha=0.2)

# Plot F group with shaded std
plt.plot(x, avg_F, label='Flower diet (F)', color='green', marker='s')
plt.fill_between(x, avg_F - std_F, avg_F + std_F, color='green', alpha=0.2)

# Axis formatting
plt.xticks(x, x_labels)
plt.xlabel('Developmental stage')
plt.ylabel('Days since start')
plt.title('Caterpillar Development Timing: Leaf vs Flower Diet')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)

plt.tight_layout()
plt.show()







#Extra dataset with extra data.
# all includable extra data, including frozen pupae

# Data
x_labels = ["2nd instar", "3rd instar", "4th instar", "5th instar", "pupa date"]
x = np.arange(len(x_labels))  # Numeric x-values

# Group L data
avg_L = np.array([3.072380952, 5.141428571, 7.16952381, 10.32619048, 16.45666667])
std_L = np.array([0.22257369, 0.30424145, 0.29230936, 0.81940513, 1.7193671])

# Group F data
avg_F = np.array([3.082580645, 5.112903226, 7.19516129, 10.09032258, 15.84258065])
std_F = np.array([0.25631969, 0.2509873, 0.38874903, 0.77004538, 1.5436212])

# Plotting
plt.figure(figsize=(10, 6))

# Plot L group with shaded std
plt.plot(x, avg_L, label='Leaf diet (L)', color='blue', marker='o')
plt.fill_between(x, avg_L - std_L, avg_L + std_L, color='blue', alpha=0.2)

# Plot F group with shaded std
plt.plot(x, avg_F, label='Flower diet (F)', color='green', marker='s')
plt.fill_between(x, avg_F - std_F, avg_F + std_F, color='green', alpha=0.2)

# Axis formatting
plt.xticks(x, x_labels)
plt.xlabel('Developmental stage')
plt.ylabel('Days since start')
plt.title('Leaf vs Flower Diet, larger dataset')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)

plt.tight_layout()
plt.show()






# Data
# more expansive dataset, only including frozen adults

x_labels = ["2nd instar", "3rd instar", "4th instar", "5th instar", "pupa date", "eclosion date"]
x = np.arange(len(x_labels))  # Numeric x-values

# Group L data
avg_L = np.array([3.072380952, 5.141428571, 7.16952381, 10.32619048, 16.45666667, 25.56047619])
std_L = np.array([0.22257369, 0.30424145, 0.29230936, 0.81940513, 1.7193671, 1.8803789])

# Group F data
avg_F = np.array([3.088571429, 5.122142857, 7.202857143, 10.12535714, 15.98357143, 25.00964286])
std_F = np.array([0.2693987, 0.26275403, 0.40711139, 0.79577347, 1.5562948, 1.672719])

# Plotting
plt.figure(figsize=(10, 6))

# Plot L group with shaded std
plt.plot(x, avg_L, label='Leaf diet (L)', color='blue', marker='o')
plt.fill_between(x, avg_L - std_L, avg_L + std_L, color='blue', alpha=0.2)

# Plot F group with shaded std
plt.plot(x, avg_F, label='Flower diet (F)', color='green', marker='s')
plt.fill_between(x, avg_F - std_F, avg_F + std_F, color='green', alpha=0.2)

# Axis formatting
plt.xticks(x, x_labels)
plt.xlabel('Developmental stage')
plt.ylabel('Days since start')
plt.title('Leaf vs Flower Diet, all eclosed data')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)

plt.tight_layout()
plt.show()






# Data
# more expansive dataset, only including frozen adults, not including adult data

x_labels = ["2nd instar", "3rd instar", "4th instar", "5th instar", "pupa date"]
x = np.arange(len(x_labels))  # Numeric x-values

# Group L data
avg_L = np.array([3.072380952, 5.141428571, 7.16952381, 10.32619048, 16.45666667])
std_L = np.array([0.22257369, 0.30424145, 0.29230936, 0.81940513, 1.7193671])

# Group F data
avg_F = np.array([3.088571429, 5.122142857, 7.202857143, 10.12535714, 15.98357143])
std_F = np.array([0.2693987, 0.26275403, 0.40711139, 0.79577347, 1.5562948])

# Plotting
plt.figure(figsize=(10, 6))

# Plot L group with shaded std
plt.plot(x, avg_L, label='Leaf diet (L)', color='blue', marker='o')
plt.fill_between(x, avg_L - std_L, avg_L + std_L, color='blue', alpha=0.2)

# Plot F group with shaded std
plt.plot(x, avg_F, label='Flower diet (F)', color='green', marker='s')
plt.fill_between(x, avg_F - std_F, avg_F + std_F, color='green', alpha=0.2)

# Axis formatting
plt.xticks(x, x_labels)
plt.xlabel('Developmental stage')
plt.ylabel('Days since start')
plt.title('Leaf vs Flower Diet, all eclosed data')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)

plt.tight_layout()
plt.show()
















